from scripts.yaml_io import read_yaml, write_yaml
from scripts.extract_gb_info import get_locus, get_identification_version, get_genes
from scripts.import_user_data import Data

from scripts.get_software_parameters import (
    get_nanofilt_parameters,
    mask_regions_parameters,
    get_trimmomatic_parameters,
    get_snippy_parameters,
)


workdir: "results/"


software_parameters = read_yaml("../user/parameters.yaml")

sample_data: Data = Data("../user/SARS_CoV_2_80snps.csv")
(
    paired_illumina,
    single_illumina,
    ont_samples,
    sample_info_dic,
) = sample_data.get_options()

concatenated_illumina = list({**paired_illumina, **single_illumina}.keys())

user_metadata = read_yaml("../user/SARS_CoV_2_80snps.yaml")


PROJECT_NAME = user_metadata["project_name"]
REFERENCE_FASTA = user_metadata["fasta_reference"]
REFERENCE_GB = user_metadata["gb_reference"]
REFERENCE_TO_CREATE = user_metadata["create_fastq_ref"]
REFERENCE_NAME = re.findall("(?<=references/)(.*?)(?=.fasta)", REFERENCE_FASTA)[0]
SEGMENTS = get_locus(REFERENCE_GB)
PRIMERS = (
    user_metadata.get("primers") if user_metadata.get("primers") is not None else False
)
ASSEMBLER = ["snippy", "iVar"]

identification, version = get_identification_version(SEGMENTS, REFERENCE_GB)

config_user = {
    "samples": sample_info_dic,
    "project": user_metadata["project_name"],
    "locus": get_locus(REFERENCE_GB),
    "proteins": get_genes(REFERENCE_GB),
    "identification": identification,
    "version": version,
    "sample_type": sample_data.get_sample_type(),
}

COVERAGE = user_metadata["coverage"]
PROJECT_NAME = config_user["project"]
FOLDER_NAME = user_metadata["folder"]
write_yaml("../config/config.yaml", config_user)


include: "rules/snippy.smk"


if PRIMERS:

    include: "rules/iVar.smk"


else:

    include: "rules/iVar_noPrimer.smk"


include: "rules/consensus.smk"


include: "rules/gather_consensus.smk"


include: "rules/trimmomatic.smk"


include: "rules/getCoverage.smk"


include: "rules/generate_reads.smk"


include: "rules/generate_alt_references.smk"


include: "rules/snpeff.smk"


include: "rules/freebayes.smk"


include: "rules/variants.smk"


rule all:
    input:
        expand(
            "{project}/validated_variants_{illumina_genome_assembly_software}.csv",
            project=PROJECT_NAME,
            illumina_genome_assembly_software=ASSEMBLER,
        ),
        expand(
            "{project}/validated_minor_iSNVs_{illumina_genome_assembly_software}.csv",
            project=PROJECT_NAME,
            illumina_genome_assembly_software=ASSEMBLER,
        ),
        expand(
            "{project}/validated_minor_iSNVs_inc_indels_{illumina_genome_assembly_software}.csv",
            project=PROJECT_NAME,
            illumina_genome_assembly_software=ASSEMBLER,
        ),
        expand(
            "{project}/proportions_iSNVs_graph_{illumina_genome_assembly_software}.csv",
            project=PROJECT_NAME,
            illumina_genome_assembly_software=ASSEMBLER,
        ),
        expand(
            "align_samples/{sample}/{illumina_genome_assembly_software}/sample__{sample}_freebayes_snpeff.vcf",
            illumina_genome_assembly_software=ASSEMBLER,
            sample=paired_illumina.keys(),
        ),
        expand(
            "align_samples/{sample}/{illumina_genome_assembly_software}/sample__{sample}_freebayes.vcf",
            illumina_genome_assembly_software=ASSEMBLER,
            sample=paired_illumina.keys(),
        ),
        expand("align_samples/{sample}/snp_ready.txt", sample=paired_illumina.keys()),
        expand(
            "align_samples/{sample}/{illumina_genome_assembly_software}/sample__{sample}_snpeff.vcf",
            illumina_genome_assembly_software=ASSEMBLER,
            sample=paired_illumina.keys(),
        ),
        expand("../user/alt_ref/{sample}.fasta", sample=concatenated_illumina),
        expand(
            "../user/reads/{folder}/{sample}_{dir}.fastq.gz",
            folder=FOLDER_NAME,
            sample=concatenated_illumina,
            dir=["1", "2"],
        ),
        expand(
            "align_samples/{sample}/{illumina_genome_assembly_software}/{sample}_consensus.fasta",
            illumina_genome_assembly_software=ASSEMBLER,
            sample=single_illumina.keys(),
        ),
        expand(
            "align_samples/{sample}/{illumina_genome_assembly_software}/{sample}_consensus.fasta",
            illumina_genome_assembly_software=ASSEMBLER,
            sample=paired_illumina.keys(),
        ),
        expand(
            "{project}/{assembler}_consensus.fasta",
            project=PROJECT_NAME,
            assembler=["snippy", "iVar"],
        ),
        expand(
            "align_samples/{sample}/iVar/snps.tsv",
            sample=paired_illumina.keys(),
        ),
        expand("{project}/coverage_translate.csv", project=PROJECT_NAME),
        expand("{project}/compare_consensus.csv", project=PROJECT_NAME),
