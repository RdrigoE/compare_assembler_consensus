from scripts.yaml_io import read_yaml, write_yaml
from scripts.extract_gb_info import get_locus, get_identification_version, get_genes
from scripts.generate_identity_dict import create_sample_dict

from scripts.get_software_parameters import (
    get_nanofilt_parameters,
    mask_regions_parameters,
    get_trimmomatic_parameters,
    get_snippy_parameters,
)

localization = read_yaml("./config/constants.yaml")


workdir: "results/"


user_metadata = read_yaml(localization["project"])
software_parameters = read_yaml(localization["parameters"])

PROJECT_NAME = user_metadata["project_name"]
REFERENCE_FASTA = user_metadata["fasta_reference"]
REFERENCE_GB = user_metadata["gb_reference"]
REFERENCE_NAME = re.findall("(?<=references/)(.*?)(?=.fasta)", REFERENCE_FASTA)[0]
SEGMENTS = get_locus(REFERENCE_GB)
PRIMERS = (
    user_metadata.get("primers") if user_metadata.get("primers") is not None else False
)
ASSEMBLER = ["snippy", "iVar"]

identification, version = get_identification_version(SEGMENTS, REFERENCE_GB)

sample_info_dic = create_sample_dict(
    int(user_metadata["number_of_samples"]),
    map(lambda x: int(x), user_metadata["identity"].split(",")),
    SEGMENTS[0],
)
concatenated_illumina = sample_info_dic.keys()

config_user = {
    "samples": sample_info_dic,
    "project": user_metadata["project_name"],
    "locus": get_locus(REFERENCE_GB),
    "proteins": get_genes(REFERENCE_GB),
    "identification": identification,
    "version": version,
    # "sample_type": sample_data.get_sample_type(),
}

IDENTITY = user_metadata["identity"].split(",")
COVERAGE = user_metadata["coverage"]
FOLDER_NAME = config_user["project"]
PROJECT_NAME = config_user["project"]
write_yaml("../config/config.yaml", config_user)
project_names = map(lambda x: f"{x}identity_{PROJECT_NAME}", IDENTITY)

PRIMER_FASTA = (
    user_metadata.get("primers_fasta")
    if user_metadata.get("primers_fasta") is not None
    else False
)
PRIMER_FASTA = (
    f"../user/primers/{user_metadata['primers_fasta']}" if PRIMER_FASTA else False
)
ALT_POSITIONS = user_metadata["alt_positions"]


include: "rules/snippy.smk"
include: "rules/iVar.smk"
include: "rules/consensus.smk"
include: "rules/gather_consensus.smk"
include: "rules/trimmomatic.smk"
include: "rules/getCoverage.smk"
include: "rules/generate_reads.smk"
include: "rules/generate_alt_references.smk"
include: "rules/variants.smk"


rule all:
    input:
        expand("{project}/compare_consensus.csv", project=project_names),
        expand("{project}/coverage_translate.csv", project=project_names),
        expand("../user/alt_ref/{sample}.fasta", sample=concatenated_illumina),
        expand(
            "../user/reads/{folder}/{sample}_{dir}.fastq.gz",
            folder=PROJECT_NAME,
            sample=concatenated_illumina,
            dir=["1", "2"],
        ),
        expand(
            "align_samples/{sample}/{illumina_genome_assembly_software}/{sample}_consensus.fasta",
            illumina_genome_assembly_software=ASSEMBLER,
            sample=concatenated_illumina,
        ),
        expand(
            "{project}/{assembler}_consensus.fasta",
            project=project_names,
            assembler=["snippy", "iVar"],
        ),
        "Mean_identity_acc_stats.png",
        "Mean_identity_MM_stats.png",
        "Mean_identity_Ns_stats.png",
        "Median_identity_acc_stats.png",
        "Median_identity_MM_stats.png",
        "Median_identity_Ns_stats.png",
        "scatter_identity_acc.png",
        "scatter_identity_MM.png",
        "scatter_identity_Ns.png"

